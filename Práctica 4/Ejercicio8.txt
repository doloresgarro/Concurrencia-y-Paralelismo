8. Resolver con PMS (Pasaje de Mensajes SINCRÓNICOS) el siguiente problema. En un 
examen final hay P alumnos y 3 profesores. Cuando todos los alumnos han llegado 
comienza el examen. Cada alumno resuelve su examen, lo entrega y espera a que alguno de 
los profesores lo corrija y le indique la nota. Los profesores corrigen los exámenes 
respectando el orden en que los alumnos van entregando.
Nota: maximizar la concurrencia y no generar demora innecesaria.

Process Alumno [id: 1..A] {
	text examen;
	int nota;

	Admin!llegada();
	Admin?comenzar();
	
	examen = resolver();

	Admin!fin(id, examen);
	Profesor[*]?nota(nota);

}

Process Profesor [id: 1..3] {
	text examen;
	int nota, idA;
	while (true) {
		Admin!pedido(id);
		Admin?espera(idA, examen);
		nota = corregir(examen);
		Alumno[idA]!Nota(nota);

	}
}

Process Admin {
	Cola c;
	text examen;
	int idA, idP;

	for i..A --> Alumno[*]?llegada();
	for i..A --> Alumno[i]!comenzar();

	do Alumno[*]?fin(idA, examen) --> push(c, (idA, examen));
	 not emtpy (c); Profesor[*]?pedido(idP); pop(c, (idA,examen))
					       Profesor[idP]!(idA, examen);
	
		
}





