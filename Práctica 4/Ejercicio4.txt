4. Simular la atención en un locutorio con 10 cabinas telefónicas, que tiene un empleado que se encarga de atender a los clientes.

Hay N clientes que al llegar esperan hasta que el empleado les indica a que cabina ir, la usan y luego se dirigen al empleado para pagarle.
 
El empleado atiende a los clientes en el orden en que hacen los pedidos, pero siempre dando prioridad a los que terminaron de usar la cabina. 
Nota: maximizar la concurrencia; suponga que hay una función Cobrar() llamada por el empleado que simula que el empleado le cobra al cliente


chan llegada(id);
chan usarCabina[C](int);
chan pagar(int, int);
cham fin[C]();


Process Cliente [id: 1..C] {
	int numC;
	text comp;
	send llegada(id);
	receive usarCabina[id](numC);
	// usar la cabina
	send pagar(id, numC);
	receive fin[id](comp);
}


Process Empleado {
	int idP, i, libres = 10; text comprobante;
	while (true) {
		while (not empty pagar) and (libres>0) {
			receive pagar(idP, numC);
			libres ++;
			comprobante = cobrar();
			send fin[idP](comprobante);
		}
		if (not empty llegada) and (libres <> 0) {
			receive llegada(id);
			send usarCabina[id](numC);
			libres --;
		}
	}
}
