7. En una herrería hay 15 empleados que forman 5 grupos de 3 personas; los grupos se forman de acuerdo al orden de llegada (los 3 primeros pertenecen al grupo 1, los 3 siguientes al grupo 2, y así sucesivamente). 

Ni bien conoce el grupo al que pertenece el empleado comienza a trabajar (no debe esperar al resto de grupo para comenzar). 

Cada grupo debe hacer exactamente P unidades de un producto (cada unidad es hecha por un único empleado).
Al terminar de hacer las P unidades de un grupo, sus 3 empleados se retiran.
Nota: maximizar la concurrencia; ningún grupo puede hacer unidades de más


int empleados = 0, grupo = 1, productos[5] = ([5] M);
sem grupo[5] = ([5] 0);

Process Empleado [id: 1..15] {
	int miGrupo;

	P(mutex);
	miGrupo = grupo;
	empleados ++;
	if (empleados == 3) {
		grupo ++;
		empleados = 0;
	}
	V(mutex);

	// armar producto
	P(grupo[miGrupo]);
	while (productos[miGrupo] <> 0) {
		productos[miGrupo]--;	// resto porque ya arme un producto
		V(grupo[miGrupo]);
		// armar producto
		P(grupo[miGrupo]);
	}
	V(grupo[miGrupo]);		
		

}