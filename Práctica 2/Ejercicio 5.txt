5. Se debe simular una maratón con C corredores donde en la llegada hay UNA máquinas expendedoras de agua con capacidad para 20 botellas.
Además existe un repositor encargado de reponer las botellas de la máquina.
Cuando los C corredores han llegado al inicio comienza la carrera. Cuando un corredor termina la carrera se dirigen a la máquina expendedora, espera 
su turno (respetando el orden de llegada), saca una botella y se retira. Si encuentra la máquina sin botellas, le avisa al repositor para que cargue nuevamente la máquina con 20 botellas; espera a que se haga la recarga; saca una botella y se retira.
Nota: maximizar la concurrencia; mientras se reponen las botellas se debe permitir que otros corredores se encolen. 

int corredores = 0, botellas = 20;
sem mutex = 1, espera[C] = ([C] 0), sinStock = 1, listo = 1, llegada = 1, espera_repo = 1;
cola q_ordenada;

process corredor [id: 0..C-1] {
	int i;

	P(mutex);
	corredores = corredores + 1;
	if (corredores == C) { //llegan todos los corredores a la meta
		for i = 1..C { V(barrera); push(q_ordenada, id);}
	}
	V(mutex);

	P(mutex);
	if (botellas > 0) { botellas = botellas - 1; }
	else {
		avisoReponerBotellas();  // le avisa al repositor
		V(reponer);
		P(listo);
	}
	V(mutex);

	// toma botella
	
	// desencolo al corredor porque ya tomo su botella
	P(mutex); // si pongo esta instruc dsp del if puede ser que otro proceso desencole y se vacíe la cola
	if (not empty(q_ordenada)) {
		pop(q_ordenada, id);
		V(mutex);
	}

}

process Repositor {
	while (true) {
		P(reponer); // espera que le digan que reponga
		reponerBotellas();
		V(listo);   // avisa que ya repuso
	}
}









